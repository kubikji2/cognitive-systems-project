Milestones:
  uzivatelsky vstup
  casovani eventu
  uvitaci obrazovka, navod na pouziti
  zpracovani dat

Tkinter 5 hour tutorial
https://www.youtube.com/watch?v=YXPyB4XeYLA&t=4821s


Pokus o vlastni linearni interpolaci napr z [0, 0, 4, 5, 0, 9, 0, 0, 6, 0, 0, 0] na [4, 4, 4, 5, 7, 9, 8, 7, 6, 6, 6, 6]
        # initialize the whole list to values in ms
        self._ms_interpolated[WHOLE] = [x for x in self._ms[WHOLE]]

        # fill beginning of the list with the first acceptable time
        index_of_first_acceptable_time = next((i for i, time in enumerate(self._ms_interpolated[WHOLE]) if self._is_time_acceptable(time)), None)
        for i in range(index_of_first_acceptable_time):
            self._ms_interpolated[WHOLE][i] = self._ms_interpolated[WHOLE][index_of_first_acceptable_time]

        # fill ending of the list with the last acceptable time
        index_of_last_acceptable_time = 0
        for i, time in enumerate(reversed(self._ms_interpolated[WHOLE])):
            if self._is_time_acceptable(time):
                index_of_last_acceptable_time = len(self._ms_interpolated[WHOLE]) - i - 1
                break
        for i in range(len(self._ms_interpolated[WHOLE]) - 1, index_of_last_acceptable_time, -1):
            self._ms_interpolated[WHOLE][i] = self._ms_interpolated[WHOLE][index_of_last_acceptable_time]

        # fill in the holes inbeteween
        previous_acceptable = index_of_first_acceptable_time
        next_acceptable = previous_acceptable
        for i in range(index_of_first_acceptable_time, index_of_last_acceptable_time + 1):
            # if current time ok, set it as the next acceptable
            if self._is_time_acceptable(self._ms_interpolated[WHOLE][i]):
                next_acceptable = i
            else:
                next_acceptable = None

            # if it is a second acceptable in a row, move the previous cursor also to this index
            if next_acceptable is not None:
                previous_acceptable = i
            # else there were some unacceptables in between
            else:

Pokus o alternativni casovani bez pouziti Tkinter.after, ktery zarucuje pouze minimalni dobu cekani, avsak jsou problemy s volanim tkinter funkci z jineho vlakna
def _show_ready(self):
    self._cs_view.set_content("ready")
    self._cs_view.set_timer(1000, self._show_empty)
    self._cs_view.set_timer(1500, self._loop_digits_thread_wrap)  # wait a while and then start displaying numbers using a new thread for precise timing

def _show_empty(self):
    self._cs_view.clear_content()
    self._cs_event_system.add_callback("action", self._action)

def _loop_digits_thread_wrap(self):
    timing_thread = Thread(target=self._loop_digits)
    timing_thread.daemon = True
    timing_thread.start()

def _loop_digits(self):
    # precise sleeping method inspiration https://stackoverflow.com/questions/40496780/how-to-make-while-loops-take-a-set-amount-of-time/40496844#40496844
    while True:
        self._start_stopwatch()

        self._cs_view.set_content("number", self._current_number)
        time_1 = 0.313 - (self._stopwatch_time() - self._stopwatch_start_time)  # 313
        if time_1 > 0:
            time.sleep(time_1)

        self._cs_view.set_content("mask")
        time_2 = 0.438 - (self._stopwatch_time() - self._stopwatch_start_time)  # + 125
        if time_2 > 0:
            time.sleep(time_2)

        self._cs_view.set_content("response")
        time_3 = 0.501 - (self._stopwatch_time() - self._stopwatch_start_time)  # + 63
        if time_3 > 0:
            time.sleep(time_3)

        self._cs_view.set_content("mask")
        time_4 = 0.876 - (self._stopwatch_time() - self._stopwatch_start_time)  # + 375
        if time_4 > 0:
            time.sleep(time_4)

        # increment
        self._current_step += 1
        self._current_number += 1
        if self._current_number == 10:
            self._current_number = 1
        # decide if should end
        if self._is_tutorial and self._current_step == self._tutorial_step_count:
            self._cs_view.set_timer(0, self._show_tutorial_results)  # (cant call directly from a different thread)
            break
        elif self._current_step == self._step_count:
            self._cs_view.set_timer(0, self._show_outro)
            break
        # else show fixation for next digit
        self._cs_view.set_content("fixation")
        time_5 = 1.439 - (self._stopwatch_time() - self._stopwatch_start_time)  # + 563
        if time_5 > 0:
            time.sleep(time_5)
